
# //#cluster
akka {

  log-dead-letters = 0
  loggers = ["akka.event.slf4j.Slf4jLogger"] 
  loglevel = "INFO"
  
  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
  }
  
  remote {
    log-remote-lifecycle-events = off
    
    quarantine-systems-for = 30s
    
    use-dispatcher = cluster-dispatcher
    
    netty.tcp {
      hostname = "127.0.0.1"
      port = 0
    }
    
  transport-failure-detector {
    heartbeat-interval = 1s
    acceptable-heartbeat-pause = 10s
  }
  watch-failure-detector {
    heartbeat-interval = 1s
    acceptable-heartbeat-pause = 10s
  }
  
  }

  cluster {
    seed-nodes = ["akka.tcp://NLPClusterSystem-0-1@127.0.0.1:2551"]
	
    auto-down = on
    use-dispatcher = cluster-dispatcher
    
    failure-detector {
      acceptable-heartbeat-pause = 10 s
    }

    gossip-interval = 200ms
    leader-actions-interval = 200ms
    unreachable-nodes-reaper-interval = 200ms
    failure-detector {
      	threshold = 10
      	heartbeat-interval = 400ms
      	acceptable-heartbeat-pause = 10s
    }
  }
}
# //#cluster

akka.actor.creation-timeout = 60s

akka.jvm-exit-on-fatal-error = on

akka.retry-unsuccessful-join-after = 10s

cluster-dispatcher {
  type = "Dispatcher"
  executor = "thread-pool-executor"
  thread-pool-executor {
    # minimum number of threads to cap factor-based core number to
    core-pool-size-min = 1
    #core-pool-size-min = 2
    # No of core threads ... ceil(available processors * factor)
    core-pool-size-factor = 2.0
    # maximum number of threads to cap factor-based number to
    core-pool-size-max = 10
  }
  throughput = 1
}


atmos {
  trace {
    enabled = true         # enable tracing
    node = Reducto         # give this node a name
 
    traceable {
      "/user/*"  = on      # trace all actors in this subtree
      "*"        = off     # other actors are not traced
      "*/metricsListener" = off
    }
 
    sampling {
      "/user/*"  = 1     # sample every 100th trace in this subtree
    }
  }
}
